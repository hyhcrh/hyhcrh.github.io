<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hyhcrh-core dump</title>
  
  <subtitle>hyhcrh&#39;s Blog</subtitle>
  <link href="https://hyhcrh.top/atom.xml" rel="self"/>
  
  <link href="https://hyhcrh.top/"/>
  <updated>2025-03-05T05:18:44.115Z</updated>
  <id>https://hyhcrh.top/</id>
  
  <author>
    <name>hyhcrh</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>滑轮导轨宽度计算 - 一次计算机性能滥用记录</title>
    <link href="https://hyhcrh.top/2025/03/04/computer-perf-od-1/"/>
    <id>https://hyhcrh.top/2025/03/04/computer-perf-od-1/</id>
    <published>2025-03-04T13:01:40.000Z</published>
    <updated>2025-03-05T05:18:44.115Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>闲的没事干</p><span id="more"></span><hr /><h2 id="起因">起因</h2><p>竞赛的机械装置 (圆柱) 需要垂直转动, 使用伺服电机控制转向.为了使电机运动顺畅, 同时防止装置转到时 碰到离得很近的外侧装置 (圆环柱),我采用了 H 槽滑轮 + 木板导轨的形式. 为了确定 选定尺寸的滑轮是否可以在导轨上顺畅运行而不会脱轨 / 卡住,需要计算导轨在不同宽度下的最小半径.</p><h2 id="抽象化问题">抽象化问题</h2><p>滑轮选择如图所示, 半径 20, 内槽宽 12.</p><figure><img src="../images/computer-perf-od-1/IMG_2128.webp" alt="IMG_2128" /><figcaption aria-hidden="true">IMG_2128</figcaption></figure><p>导轨外半径不能超过 55, 同时滑轮决定了最大宽度不能超过 12. 木板厚度为3, 无需考虑. 于是用中学的知识, 得到木板在轮子内部的长度为 <spanclass="math inline">\(2\sqrt{111}\)</span>.</p><figure><img src="../images/computer-perf-od-1/IMG_7B791672BEE0-1.webp"alt="IMG_7B791672BEE0-1" /><figcaption aria-hidden="true">IMG_7B791672BEE0-1</figcaption></figure><p>中午告诉了🐯同学方案, 他很感兴趣, 于是加入一起解决问题 =D接着查看俯视图 (两条横线就是滑轮的两个凸轮缘), 设导轨内半径为 x,导轨宽度为 y, 得到 <spanclass="math inline">\(x+y=\sqrt{x^2-111}+12\)</span>. <imgsrc="../images/computer-perf-od-1/IMG_AC85EF833C4E-1.webp"alt="IMG_AC85EF833C4E-1" /></p><p>笑死, 当时两个人都把直径半径搞错了 (更正处).<del>而且直到最后一步我都没发现这个问题</del></p><h2 id="用计算机解方程-原始">用计算机解方程 (原始)</h2><p>列不出更多方程了, 🐯同学放弃了解方程. 不过我有 python,而且相信力大砖飞 (感觉稍加优化后数据量并不大). 打开电脑问了问 DeepSeek,写了个程序.</p><blockquote><p>写一个 python 程序, 要求定义变量x和y, 满足方程"x+y=+12", 且 x+y 小于110. 给定 y, 使用指定的方法算出 x 的最小可能值, 精确到两位小数. 方法: 从开始, 到 110-y 的所有整数带入 x, 与给定的 y 值算出左右边相差,选择最小的那个对应的 x 值的整数区间, 步进 0.001 依次带入计算左右边相差,取最小的输出此时的 x 值.</p></blockquote><blockquote><p>为了实现这个程序，我们需要按照以下步骤进行：</p><ol type="1"><li>定义变量 <code>x</code> 和 <code>y</code>。</li><li>使用给定的 <code>y</code> 值，从 <code>sqrt(111)</code> 开始到<code>110 - y</code> 的所有整数带入<code>x</code>，计算方程两边的差值。</li><li>找到差值最小的 <code>x</code> 值的整数区间。</li><li>在这个区间内，以步进 <code>0.001</code> 的方式带入<code>x</code>，计算方程两边的差值，找到最小的差值对应的 <code>x</code>值。</li><li>输出 <code>x</code> 的最小可能值，精确到两位小数。</li></ol><p>以下是实现这个程序的 Python 代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">def</span> <span class="title function_">find_min_x</span>(<span class="params">y</span>):</span><br><span class="line">   min_diff = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">   best_x = <span class="number">0.0</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment"># 从 sqrt(111) 开始到 110 - y 的所有整数带入 x</span></span><br><span class="line">   start_x = <span class="built_in">int</span>(math.sqrt(<span class="number">111</span>))</span><br><span class="line">   end_x = <span class="built_in">int</span>(<span class="number">110</span> - y)</span><br><span class="line">   </span><br><span class="line">   <span class="comment"># 遍历整数区间</span></span><br><span class="line">   <span class="keyword">for</span> x_int <span class="keyword">in</span> <span class="built_in">range</span>(start_x, end_x + <span class="number">1</span>):</span><br><span class="line">       <span class="comment"># 计算方程两边的差值</span></span><br><span class="line">       left_side = x_int + y</span><br><span class="line">       right_side = math.sqrt(x_int**<span class="number">2</span> - <span class="number">111</span>) + <span class="number">12</span></span><br><span class="line">       diff = <span class="built_in">abs</span>(left_side - right_side)</span><br><span class="line">       </span><br><span class="line">       <span class="comment"># 找到差值最小的 x 值的整数区间</span></span><br><span class="line">       <span class="keyword">if</span> diff &lt; min_diff:</span><br><span class="line">           min_diff = diff</span><br><span class="line">           best_x_int = x_int</span><br><span class="line">   </span><br><span class="line">   <span class="comment"># 在 best_x_int 的附近以步进 0.001 的方式带入 x</span></span><br><span class="line">   <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(best_x_int * <span class="number">1000</span>), <span class="built_in">int</span>((best_x_int + <span class="number">1</span>) * <span class="number">1000</span>)):</span><br><span class="line">       x_val = x / <span class="number">1000.0</span></span><br><span class="line">       left_side = x_val + y</span><br><span class="line">       right_side = math.sqrt(x_val**<span class="number">2</span> - <span class="number">111</span>) + <span class="number">12</span></span><br><span class="line">       diff = <span class="built_in">abs</span>(left_side - right_side)</span><br><span class="line">       </span><br><span class="line">       <span class="comment"># 找到最小的差值对应的 x 值</span></span><br><span class="line">       <span class="keyword">if</span> diff &lt; min_diff:</span><br><span class="line">           min_diff = diff</span><br><span class="line">           best_x = x_val</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">round</span>(best_x, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment"># 给定 y 值</span></span><br><span class="line">&gt;y = <span class="number">50</span>  <span class="comment"># 你可以根据需要修改 y 的值</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="comment"># 计算并输出 x 的最小可能值</span></span><br><span class="line">&gt;x_min = find_min_x(y)</span><br><span class="line">&gt;<span class="built_in">print</span>(<span class="string">f&quot;x 的最小可能值是: <span class="subst">&#123;x_min&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="代码说明">代码说明：</h3><ol type="1"><li><strong><code>find_min_x(y)</code></strong> 函数用于计算给定<code>y</code> 值时的最小 <code>x</code> 值。</li><li><strong><code>start_x</code></strong> 和<strong><code>end_x</code></strong> 分别表示 <code>x</code>的整数区间的起始和结束值。</li><li><strong><code>min_diff</code></strong>用于记录最小的差值，<strong><code>best_x</code></strong> 用于记录对应的<code>x</code> 值。</li><li>在整数区间内遍历<code>x</code>，计算方程两边的差值，并找到差值最小的 <code>x</code>值的整数区间。</li><li>在找到的整数区间内，以步进 <code>0.001</code> 的方式遍历<code>x</code>，计算方程两边的差值，并找到最小的差值对应的<code>x</code> 值。</li><li>最后返回 <code>x</code> 的最小可能值，精确到两位小数。</li></ol><h3 id="示例输出">示例输出：</h3><p>假设 <code>y = 50</code>，程序将输出 <code>x</code>的最小可能值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;x 的最小可能值是: <span class="number">10.12</span></span><br></pre></td></tr></table></figure><p>你可以根据需要修改 <code>y</code> 的值来得到不同的结果。</p></blockquote><p>其实之前问了好几遍了, 都用的二分法, 但是得出的结果要么最小, 要么最大.Debug 一下发现这个方程用不了二分法解 (左右相差绝对值会单调增加). 本着当今计算机性能严重过剩 的信条, 就出现了文中的选择枚举法. 反正只跑一次,不缺时间.jpg</p><h2 id="程序改进">程序改进</h2><p>为了保险 <del>(其实就是懒得优化)</del></p><ol type="1"><li>(这是真的优化) 因为误差绝对值单调增加, 所以下一个 左右边差值 大于最小差值 直接 break.</li><li>整数附近 0.001 步进枚举的范围增加了一些, 开始的整数减 2, 结束整数加2.</li><li>精确枚举时如果到最后 左右边差值 还是大于 0.01 (意味着还需要增加 x),输出 -1 (满足不了).</li><li>for 循环输出当 y 为 10 和 12 步进 0.1 的每一个解, 用 format做了一个简易表格.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_min_x</span>(<span class="params">y</span>):</span><br><span class="line">    min_diff = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">    best_x = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从 sqrt(111) 开始到 110 - y 的所有整数带入 x</span></span><br><span class="line">    start_x = <span class="built_in">int</span>(math.sqrt(<span class="number">111</span>)) + <span class="number">1</span></span><br><span class="line">    end_x = <span class="built_in">int</span>(<span class="number">55</span> - y)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历整数区间</span></span><br><span class="line">    <span class="keyword">for</span> x_int <span class="keyword">in</span> <span class="built_in">range</span>(start_x, end_x + <span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 计算方程两边的差值</span></span><br><span class="line">        left_side = x_int + y</span><br><span class="line">        right_side = math.sqrt(x_int ** <span class="number">2</span> - <span class="number">111</span>) + <span class="number">12</span></span><br><span class="line">        diff = <span class="built_in">abs</span>(left_side - right_side)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 找到差值最小的 x 值的整数区间</span></span><br><span class="line">        <span class="keyword">if</span> diff &lt; min_diff:</span><br><span class="line">            min_diff = diff</span><br><span class="line">            best_x_int = x_int</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    min_diff = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在 best_x_int 的附近以步进 0.001 的方式带入 x</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>((best_x_int -<span class="number">2</span>) * <span class="number">1000</span>), <span class="built_in">int</span>((best_x_int + <span class="number">2</span>) * <span class="number">1000</span>)):</span><br><span class="line">        x_val = x / <span class="number">1000.0</span></span><br><span class="line">        left_side = x_val + y</span><br><span class="line">        right_side = math.sqrt(x_val ** <span class="number">2</span> - <span class="number">111</span>) + <span class="number">12</span></span><br><span class="line">        diff = <span class="built_in">abs</span>(left_side - right_side)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 找到最小的差值对应的 x 值</span></span><br><span class="line">        <span class="keyword">if</span> diff &lt; min_diff:</span><br><span class="line">            min_diff = diff</span><br><span class="line">            best_x = x_val</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> min_diff &gt;= <span class="number">0.01</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">round</span>(best_x, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给定 y 值</span></span><br><span class="line"><span class="comment"># y = 11.4  # 你可以根据需要修改 y 的值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 值少于 10 个字符用空格填充 (冒号小于号之间的字符)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;: &lt;10&#125;|&#123;: &lt;10&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算并输出 x 的最小可能值</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>, <span class="number">121</span>):</span><br><span class="line">    x_min = find_min_x(i/<span class="number">10</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;: &lt;10&#125;|&#123;: &lt;10&#125;&quot;</span>.<span class="built_in">format</span>(x_min, i/<span class="number">10</span>))</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">x         |y         </span><br><span class="line">28.75     |10.0      </span><br><span class="line">30.16     |10.1      </span><br><span class="line">31.73     |10.2      </span><br><span class="line">33.5      |10.3      </span><br><span class="line">35.49     |10.4      </span><br><span class="line">37.75     |10.5      </span><br><span class="line">40.34     |10.6      </span><br><span class="line">43.34     |10.7      </span><br><span class="line">-1        |10.8      </span><br><span class="line">-1        |10.9      </span><br><span class="line">-1        |11.0      </span><br><span class="line">-1        |11.1      </span><br><span class="line">-1        |11.2      </span><br><span class="line">-1        |11.3      </span><br><span class="line">-1        |11.4      </span><br><span class="line">-1        |11.5      </span><br><span class="line">-1        |11.6      </span><br><span class="line">-1        |11.7      </span><br><span class="line">-1        |11.8      </span><br><span class="line">-1        |11.9      </span><br><span class="line">-1        |12.0      </span><br></pre></td></tr></table></figure><h2 id="后记">后记</h2><p>用上了再说吧, 想着一个小风机或许不需要导轨限位呢 ( ).不过解决了问题还是很开心的. 超级感谢🐯同学提供的思路🙏.</p><h2 id="等等-为什么没有想到-这是一个可以画图的函数呢">等等,为什么没有想到 这是一个可以画图的函数呢?</h2><figure><img src="../images/computer-perf-od-1/image-20250305122012115.png"alt="image-20250305122012115" /><figcaption aria-hidden="true">image-20250305122012115</figcaption></figure><h2 id="section">😭</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;闲的没事干&lt;/p&gt;</summary>
    
    
    
    <category term="随记" scheme="https://hyhcrh.top/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
    <category term="AI 很实用" scheme="https://hyhcrh.top/tags/AI-%E5%BE%88%E5%AE%9E%E7%94%A8/"/>
    
    <category term="Python" scheme="https://hyhcrh.top/tags/Python/"/>
    
    <category term="DeepSeek" scheme="https://hyhcrh.top/tags/DeepSeek/"/>
    
    <category term="DI" scheme="https://hyhcrh.top/tags/DI/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio 添加 Vector Asset 不显示 / 只显示少量图标 怎么办?</title>
    <link href="https://hyhcrh.top/2025/02/09/android-studio-icons-metadata/"/>
    <id>https://hyhcrh.top/2025/02/09/android-studio-icons-metadata/</id>
    <published>2025-02-09T07:12:19.000Z</published>
    <updated>2025-03-05T05:15:02.269Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><code>&lt;SDK文件夹&gt;/icons/material/icons_metadata.txt</code>的锅</p><span id="more"></span><hr /><h2 id="解决方案">解决方案</h2><ol type="1"><li>关闭 Vector Asset 窗口.</li><li>打开 SDK 文件夹 ( <code>~/Android/Sdk</code> ), 进入<code>icons/material/</code>, 删除 <code>icons_metadata.txt</code>.</li><li>打开 Vector Asset 窗口, 等待其生成图标.</li><li><strong>窗口应当生成很多图标</strong>. 如果还是没有 / 很少,那么可以关闭这个页面了.</li><li>此时把 <code>icons_metadata.txt</code> 设为所有人只读即可.</li></ol><p>附赠 Windows / macOS 默认 SDK 位置:</p><table><colgroup><col style="width: 10%" /><col style="width: 89%" /></colgroup><thead><tr class="header"><th>系统</th><th>默认 SDK 位置</th></tr></thead><tbody><tr class="odd"><td>Windows</td><td><code>%USERPROFILE\Android\Sdk\</code><br /><code>C:\Users\&lt;用户名&gt;\Android\Sdk\</code></td></tr><tr class="even"><td>macOS</td><td><code>~/Library/Android/sdk</code><br /><code>/Users/&lt;用户名&gt;/Library/Android/sdk</code></td></tr></tbody></table><p>来自https://stackoverflow.com/questions/64382564/how-i-fix-nothing-to-show-in-my-vector-asset-in-android-studio</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;&amp;lt;SDK文件夹&amp;gt;/icons/material/icons_metadata.txt&lt;/code&gt;
的锅&lt;/p&gt;</summary>
    
    
    
    <category term="Development" scheme="https://hyhcrh.top/categories/Development/"/>
    
    <category term="Android" scheme="https://hyhcrh.top/categories/Development/Android/"/>
    
    <category term="FAQ" scheme="https://hyhcrh.top/categories/FAQ/"/>
    
    
    <category term="Android" scheme="https://hyhcrh.top/tags/Android/"/>
    
    <category term="Android Studio" scheme="https://hyhcrh.top/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>Hi there!</title>
    <link href="https://hyhcrh.top/2024/11/04/welcome/"/>
    <id>https://hyhcrh.top/2024/11/04/welcome/</id>
    <published>2024-11-04T07:17:50.000Z</published>
    <updated>2025-02-09T12:42:41.069Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>这才是真正的第一篇博客（笑</p><span id="more"></span><p>在这里会分享一些笔记和生活见闻. Dump 是调试中常用的功能,里面包含了核心状态与其他必要信息. 大概取名的意思就在这里.</p><hr /><h2 id="trivia-杂事">Trivia / <code>杂事</code></h2><p>想到再写啦</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这才是真正的第一篇博客（笑&lt;/p&gt;</summary>
    
    
    
    <category term="Trivia" scheme="https://hyhcrh.top/categories/Trivia/"/>
    
    
  </entry>
  
</feed>
